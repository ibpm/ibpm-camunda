<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.ibpm.engine.dao.InstanceMapper">

    <select id="getById" parameterType="java.lang.String" resultMap="instanceResultMap">
        <include refid="instanceJoinProcess" />
        WHERE j.ID = #{1, jdbcType=VARCHAR}
    </select>

    <select id="getByInstId" parameterType="java.lang.String" resultMap="instanceResultMap">
        <include refid="instanceJoinProcess" />
        <where>
            j.PROC_INST_ID = #{1, jdbcType=VARCHAR}
        </where>
    </select>

    <select id="getByIds" parameterType="list" resultMap="instanceResultMap">
        SELECT * FROM ${tablePrefix}instance
        <where>
            AND ID in
            <foreach item="id" collection="list" open="(" separator="," close=")">
                #{id, jdbcType=VARCHAR}
            </foreach>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM ${tablePrefix}execution j
        <where>
            <include refid="condProcessDefinitionKey"/>
            <if test="status != null &amp;&amp;status.size() &gt; 0">
                AND STATUS IN
                <foreach item="item" collection="status" open="(" separator="," close=")">
                    #{item, jdbcType=INTEGER}
                </foreach>
            </if>
        </where>
    </select>

    <select id="countInstance" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(*)  FROM ${tablePrefix}instance j
        <where>
            <include refid="condProcessDefinitionKey" />
            <if test="lowerStartTime != null">
                AND start_time &gt;= #{lowerStartTime, jdbcType=INTEGER}
            </if>
            <if test="upperStartTime != null">
                AND start_time &lt;= #{upperStartTime, jdbcType=INTEGER}
            </if>
            <if test="status != null &amp;&amp;status.size() &gt; 0">
                AND STATUS in
                <foreach item="item" collection="status" open="(" separator="," close=")">
                    #{item, jdbcType=INTEGER}
                </foreach>
            </if>
        </where>
    </select>

    <select id="countProcessChildren" parameterType="string" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM ${tablePrefix}instance WHERE super_proc_inst_id = #{1, jdbcType=VARCHAR}
    </select>

    <select id="listProcessChildren" parameterType="string"
            resultType="com.github.ibpm.common.result.core.instance.InstanceWithChildren">
        SELECT * FROM ${tablePrefix}instance WHERE super_proc_inst_id = #{1, jdbcType=VARCHAR} ORDER BY id
    </select>

    <select id="countRetriedChildren" parameterType="string" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM ${tablePrefix}instance WHERE parent_id = #{1, jdbcType=VARCHAR} AND id != parent_id
    </select>

    <select id="listRetriedChildren" parameterType="string" resultMap="instanceWithChildrenResultMap">
        <include refid="instanceJoinProcess" />
        WHERE j.parent_id = #{1, jdbcType=VARCHAR} AND j.id != j.parent_id ORDER BY j.id DESC
    </select>

    <insert id="addExecution" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        INSERT INTO ${tablePrefix}execution
        <include refid="insertSql"/>
    </insert>

    <insert id="addInstance" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        INSERT INTO ${tablePrefix}instance
        <include refid="insertSql"/>
    </insert>

    <sql id="insertSql">
        (
            PROC_INST_ID,
            ROOT_PROC_INST_ID,
            SUPER_PROC_INST_ID,
            PROC_DEF_KEY,
            TITLE,
            STATUS
        )
        VALUES
        (
            #{processInstanceId, jdbcType=VARCHAR},
            #{rootProcessInstanceId, jdbcType=VARCHAR},
            #{superProcessInstanceId, jdbcType=VARCHAR},
            #{processDefinitionKey, jdbcType=VARCHAR},
            #{title, jdbcType=VARCHAR},
            #{status, jdbcType=INTEGER}
        )
    </sql>

    <update id="updateExecution" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        UPDATE ${tablePrefix}execution
        <include refid="updateSql"/>
    </update>

    <update id="updateInstance" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        UPDATE ${tablePrefix}instance
        <include refid="updateSql"/>
    </update>

    <update id="updateDone" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        UPDATE ${tablePrefix}instance
        <set>
            <if test="status != null">
                STATUS = #{status, jdbcType=INTEGER},
            </if>
        </set>
        <where>
            <include refid="condProcessInstanceId_"/>
        </where>
    </update>

    <delete id="deleteExecution" parameterType="string">
        DELETE FROM ${tablePrefix}execution
        <where>
            PROC_INST_ID = #{1, jdbcType=VARCHAR}
        </where>
    </delete>

    <delete id="deleteInstance" parameterType="string">
        DELETE FROM ${tablePrefix}instance
        <where>
            PROC_INST_ID = #{1, jdbcType=VARCHAR}
        </where>
    </delete>

    <sql id="updateSql">
        <set>
            <if test="rootProcessInstanceId != null">
                ROOT_PROC_INST_ID = #{rootProcessInstanceId, jdbcType=VARCHAR},
            </if>
            <if test="superProcessInstanceId != null">
                SUPER_PROC_INST_ID = #{superProcessInstanceId, jdbcType=VARCHAR},
            </if>
            <if test="title != null">
                TITLE = #{title, jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                STATUS = #{status, jdbcType=INTEGER},
            </if>
        </set>
        <where>
            <include refid="condProcessInstanceId_"/>
        </where>
    </sql>

    <insert id="addAct" parameterType="com.github.ibpm.common.result.core.instance.InstanceAct">
        INSERT INTO ${tablePrefix}instance_act
        (
            ID,
            ACT_INST_ID,
            PARENT_ACT_INST_ID,
            PROC_INST_ID,
            ROOT_PROC_INST_ID,
            ACT_ID,
            ACT_NAME,
            ACT_TYPE,
            START_TIME,
            STATUS,
            LOG_TEXT
        )
        VALUES
        (
            #{id, jdbcType=VARCHAR},
            #{actInstId, jdbcType=VARCHAR},
            #{parentActInstId, jdbcType=VARCHAR},
            #{processInstanceId, jdbcType=VARCHAR},
            #{rootProcessInstanceId, jdbcType=VARCHAR},
            #{actId, jdbcType=VARCHAR},
            #{actName, jdbcType=VARCHAR},
            #{actType, jdbcType=VARCHAR},
            #{startTime, jdbcType=INTEGER},
            #{status, jdbcType=INTEGER},
            #{logText, jdbcType=VARCHAR}
        )
    </insert>

    <update id="updateAct" parameterType="com.github.ibpm.common.result.core.instance.InstanceAct">
        UPDATE ${tablePrefix}instance_act
        <set>
            <if test="status != null">
                STATUS = #{status, jdbcType=INTEGER},
            </if>
            <if test="endTime != null">
                END_TIME = #{endTime, jdbcType=INTEGER},
            </if>
            <if test="duration != null">
                DURATION = #{duration, jdbcType=INTEGER},
            </if>
            <if test="bizUri != null">
                BIZ_URI = #{bizUri, jdbcType=VARCHAR},
            </if>
            <if test="logKey != null">
                LOG_KEY = #{logKey, jdbcType=VARCHAR},
            </if>
            <if test="logText != null">
                LOG_TEXT = CONCAT(LOG_TEXT, #{logText, jdbcType=VARCHAR}),
            </if>
        </set>
        <where>
            <include refid="condId_"/>
            <include refid="condProcessInstanceId_"/>
            <include refid="condActId_"/>
        </where>
    </update>

    <select id="listInstance" parameterType="map" resultMap="instanceWithChildrenResultMap">
        SELECT * FROM (<include refid="todoListWrapperSql" />)j
        <where>
            AND j.SUPER_PROC_INST_ID IS NULL
            <if test="processDefinitionKey != null">
                AND LOWER(j.PROC_DEF_KEY) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionKey, jdbcType=VARCHAR})), '%')
            </if>
            <if test="processDefinitionName != null">
                AND LOWER(j.PROC_DEF_NAME) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionName, jdbcType=VARCHAR})), '%')
            </if>
            <if test="lowerStartTime != null">
                AND j.START_TIME &gt;= #{lowerStartTime, jdbcType=INTEGER}
            </if>
            <if test="upperStartTime != null">
                AND j.START_TIME &lt;= #{upperStartTime, jdbcType=INTEGER}
            </if>
            <if test="lowerEndTime != null">
                AND j.END_TIME &gt; #{lowerEndTime, jdbcType=INTEGER}
            </if>
            <if test="upperEndTime != null">
                AND j.END_TIME &lt;= #{upperEndTime, jdbcType=INTEGER}
            </if>
            <if test="lowerDuration != null">
                AND j.DURATION &gt;= #{lowerDuration, jdbcType=INTEGER}
            </if>
            <if test="upperDuration != null">
                AND j.DURATION &lt;= #{upperDuration, jdbcType=INTEGER}
            </if>
            <include refid="condProcessInstanceId"/>
        </where>
        <choose>
            <when test="sort == null">
                order by PROC_INST_ID DESC
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="listTodo" parameterType="map" resultMap="instanceWithChildrenResultMap">
        SELECT * FROM (<include refid="todoListSql" />)j
        <where>
            AND j.SUPER_PROC_INST_ID IS NULL
            <if test="userName != null">
                AND j.ASSIGNEE = #{userName, jdbcType=VARCHAR}
            </if>
            <if test="processDefinitionKey != null">
                AND LOWER(j.PROC_DEF_KEY) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionKey, jdbcType=VARCHAR})), '%')
            </if>
            <if test="processDefinitionName != null">
                AND LOWER(j.PROC_DEF_NAME) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionName, jdbcType=VARCHAR})), '%')
            </if>
            <if test="title != null">
                AND LOWER(j.TITLE) LIKE CONCAT(CONCAT('%', LOWER(#{title, jdbcType=VARCHAR})), '%')
            </if>
            <if test="lowerStartTime != null">
                AND j.START_TIME &gt;= #{lowerStartTime, jdbcType=INTEGER}
            </if>
            <if test="upperStartTime != null">
                AND j.START_TIME &lt;= #{upperStartTime, jdbcType=INTEGER}
            </if>
            <if test="status != null">
                AND j.STATUS = #{status, jdbcType=INTEGER}
            </if>
            <include refid="condProcessInstanceId"/>
        </where>
        <choose>
            <when test="sort == null">
                order by PROC_INST_ID DESC
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="listDoing" parameterType="map" resultMap="instanceWithChildrenResultMap">
        SELECT
            ins.PROC_INST_ID_ AS PROC_INST_ID,
            ins.PROC_DEF_ID_ AS PROC_DEF_ID,
            d.VERSION_ AS VERSION,
            d.KEY_ AS PROC_DEF_KEY,
            d.NAME_ AS PROC_DEF_NAME,
            ii.TITLE,
            ii.STATUS,
            ins.BUSINESS_KEY_ AS BUSINESS_KEY,
            ins.START_USER_ID_ AS STARTER,
            ins.START_TIME_ AS START_TIME,
            ins.ROOT_PROC_INST_ID_ AS ROOT_PROC_INST_ID,
            ins.SUPER_PROCESS_INSTANCE_ID_ AS SUPER_PROC_INST_ID
        FROM
            ${tablePrefix}execution ii
            JOIN act_hi_procinst ins
            ON ins.proc_inst_id_ = ii.proc_inst_id
            JOIN act_re_procdef d
            ON d.ID_ = ins.proc_def_id_
        <where>
            ins.END_TIME_ IS NULL
            AND EXISTS
            (SELECT
                1
            FROM
                act_hi_taskinst t
            WHERE t.end_time_ IS NOT NULL
                AND t.proc_inst_id_ = ins.proc_inst_id_
                AND t.ASSIGNEE_ = #{userName, jdbcType=VARCHAR})
            <if test="processDefinitionKey != null">
                AND LOWER(j.PROC_DEF_KEY) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionKey, jdbcType=VARCHAR})), '%')
            </if>
            <if test="processDefinitionName != null">
                AND LOWER(j.PROC_DEF_NAME) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionName, jdbcType=VARCHAR})), '%')
            </if>
            <if test="title != null">
                AND LOWER(j.TITLE) LIKE CONCAT(CONCAT('%', LOWER(#{title, jdbcType=VARCHAR})), '%')
            </if>
            <if test="lowerStartTime != null">
                AND j.START_TIME &gt;= #{lowerStartTime, jdbcType=INTEGER}
            </if>
            <if test="upperStartTime != null">
                AND j.START_TIME &lt;= #{upperStartTime, jdbcType=INTEGER}
            </if>
            <if test="status != null">
                AND j.STATUS = #{status, jdbcType=INTEGER}
            </if>
        </where>
        <choose>
            <when test="sort == null">
                order by PROC_INST_ID DESC
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="listDone" parameterType="map" resultMap="instanceWithChildrenResultMap">
        SELECT
            ins.PROC_INST_ID_ AS PROC_INST_ID,
            ins.PROC_DEF_ID_ AS PROC_DEF_ID,
            d.VERSION_ AS VERSION,
            d.KEY_ AS PROC_DEF_KEY,
            d.NAME_ AS PROC_DEF_NAME,
            ii.TITLE,
            ii.STATUS,
            ins.BUSINESS_KEY_ AS BUSINESS_KEY,
            ins.START_USER_ID_ AS STARTER,
            ins.START_TIME_ AS START_TIME,
            ins.END_TIME_ AS END_TIME,
            ins.DURATION_ AS DURATION,
            ins.ROOT_PROC_INST_ID_ AS ROOT_PROC_INST_ID,
            ins.SUPER_PROCESS_INSTANCE_ID_ AS SUPER_PROC_INST_ID
        FROM
            ${tablePrefix}instance ii
        JOIN act_hi_procinst ins
            ON ins.proc_inst_id_ = ii.proc_inst_id
        JOIN act_re_procdef d
            ON d.ID_ = ins.proc_def_id_
        <where>
            ins.END_TIME_ IS NOT NULL
            AND EXISTS
            (SELECT
                1
            FROM
                act_hi_taskinst t
            WHERE t.end_time_ IS NOT NULL
            AND t.proc_inst_id_ = ins.proc_inst_id_
            AND t.ASSIGNEE_ = #{userName, jdbcType=VARCHAR})
            <if test="processDefinitionKey != null">
                AND LOWER(j.PROC_DEF_KEY) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionKey, jdbcType=VARCHAR})), '%')
            </if>
            <if test="processDefinitionName != null">
                AND LOWER(j.PROC_DEF_NAME) LIKE CONCAT(CONCAT('%', LOWER(#{processDefinitionName, jdbcType=VARCHAR})), '%')
            </if>
            <if test="title != null">
                AND LOWER(j.TITLE) LIKE CONCAT(CONCAT('%', LOWER(#{title, jdbcType=VARCHAR})), '%')
            </if>
            <if test="lowerStartTime != null">
                AND j.START_TIME &gt;= #{lowerStartTime, jdbcType=INTEGER}
            </if>
            <if test="upperStartTime != null">
                AND j.START_TIME &lt;= #{upperStartTime, jdbcType=INTEGER}
            </if>
            <if test="status != null">
                AND j.STATUS = #{status, jdbcType=INTEGER}
            </if>
        </where>
        <choose>
            <when test="sort == null">
                order by PROC_INST_ID DESC
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="listAct" parameterType="map"
            resultType="com.github.ibpm.common.result.core.instance.InstanceAct">
        SELECT j.* FROM (
        SELECT jia.ID, jia.ACT_INST_ID, jia.PARENT_ACT_INST_ID, jia.PROC_INST_ID,jia.ROOT_PROC_INST_ID,
        jia.ACT_ID, jia.ACT_NAME, jia.ACT_TYPE, jia.STATUS, jia.LOG_KEY, jia.BIZ_URI,
        jia.START_TIME, jia.END_TIME, jia.DURATION, jia.LOG_TEXT, hi.INCIDENT_MSG_ AS INCIDENT_MSG
        FROM ${tablePrefix}instance_act jia
        LEFT JOIN act_hi_incident hi ON jia.PROC_INST_ID = hi.PROC_INST_ID_ AND jia.ACT_ID = hi.ACTIVITY_ID_) j
        <where>
            <include refid="condProcessInstanceId" />
            <include refid="condActId_" />
        </where>
    </select>

    <select id="listRunningOfExecutor" parameterType="string"
            resultType="com.github.ibpm.common.result.core.instance.Instance">
        SELECT j.*, b.PROC_DEF_NAME FROM ${tablePrefix}execution j
        LEFT JOIN ${tablePrefix}process b
        ON j.PROC_DEF_KEY = b.PROC_DEF_KEY
        <where>
            AND j.EXECUTOR_URI LIKE CONCAT(CONCAT('%', #{1, jdbcType=VARCHAR}), '%')
            AND j.STATUS = 0
        </where>
    </select>

    <sql id="todoListWrapperSql">
        SELECT
            ta.PROC_INST_ID,
            GROUP_CONCAT(DISTINCT ta.TASK_ID SEPARATOR ',') AS TASK_ID,
            ta.PROC_DEF_ID,
            ta.VERSION,
            ta.PROC_DEF_KEY,
            ta.PROC_DEF_NAME,
            ta.TITLE,
            ta.STATUS,
            ta.BUSINESS_KEY,
            ta.STARTER,
            ta.ROOT_PROC_INST_ID,
            ta.SUPER_PROC_INST_ID,
            GROUP_CONCAT(DISTINCT ta.ASSIGNEE SEPARATOR ',') AS ASSIGNEES,
            GROUP_CONCAT(DISTINCT ta.ASSIGN_NAME SEPARATOR ',') AS ASSIGN_NAMES,
            GROUP_CONCAT(DISTINCT ta.GRANTER SEPARATOR ',') AS GRANTERS,
            GROUP_CONCAT(DISTINCT ta.GRANT_NAME SEPARATOR ',') AS GRANT_NAMES,
            ta.ACT_ID,
            ta.ACT_NAME,
            ta.START_TIME,
            ta.ASSIGN_TIME
        FROM
          (<include refid="todoListSql" />) ta
        GROUP BY ta.PROC_INST_ID, ta.ACT_ID
    </sql>

    <sql id="todoListSql">
        SELECT
            task.PROC_INST_ID,
            task.TASK_ID,
            task.PROC_DEF_ID,
            task.VERSION,
            task.PROC_DEF_KEY,
            task.PROC_DEF_NAME,
            task.TITLE,
            task.STATUS,
            task.BUSINESS_KEY,
            task.STARTER,
            task.START_TIME,
            task.ROOT_PROC_INST_ID,
            task.SUPER_PROC_INST_ID,
            task.ACT_ID,
            task.ACT_NAME,
            task.ASSIGNEE AS GRANTER,
            u.DISPLAY_NAME AS GRANT_NAME,
            IFNULL(o.ASSIGNEE, task.ASSIGNEE) AS ASSIGNEE,
            IFNULL(o.ASSIGN_NAME, u.DISPLAY_NAME) AS ASSIGN_NAME,
            task.ASSIGN_TIME
        FROM
            (SELECT
                ins.PROC_INST_ID_ AS PROC_INST_ID,
                t.ID_ AS TASK_ID,
                ins.PROC_DEF_ID_ AS PROC_DEF_ID,
                d.VERSION_ AS VERSION,
                d.KEY_ AS PROC_DEF_KEY,
                d.NAME_ AS PROC_DEF_NAME,
                t.TASK_DEF_KEY_ AS ACT_ID,
                t.NAME_ AS ACT_NAME,
                IFNULL(t.ASSIGNEE_, l.USER_ID_) AS ASSIGNEE,
                t.CREATE_TIME_ AS ASSIGN_TIME,
                ii.TITLE,
                ii.STATUS,
                ins.BUSINESS_KEY_ AS BUSINESS_KEY,
                ins.START_USER_ID_ AS STARTER,
                ins.START_TIME_ AS START_TIME,
                ins.ROOT_PROC_INST_ID_ AS ROOT_PROC_INST_ID,
                ins.SUPER_PROCESS_INSTANCE_ID_ AS SUPER_PROC_INST_ID
            FROM act_ru_task t
            LEFT JOIN act_ru_identitylink l
              ON t.ID_ = l.TASK_ID_
                AND l.TYPE_ = 'candidate'
                AND l.USER_ID_ IS NOT NULL
                AND t.ASSIGNEE_ IS NULL
            JOIN act_hi_procinst ins
              ON t.proc_inst_id_ = ins.proc_inst_id_
            JOIN ${tablePrefix}execution ii
              ON t.proc_inst_id_ = ii.proc_inst_id
            JOIN act_re_procdef d
              ON d.ID_ = ins.proc_def_id_) task
            LEFT JOIN (<include refid="proxySql"/>) o
              ON task.assignee = o.GRANTER
                AND (ISNULL(o.PROC_DEF_KEY) OR task.PROC_DEF_KEY = o.PROC_DEF_KEY)
            LEFT JOIN ibpm_user u
              ON task.assignee = u.USER_NAME
    </sql>

    <sql id="proxySql">
        SELECT
          r.ID,
          p.PROC_DEF_KEY,
          OPER_USER,
          OPER_NAME,
          CREATE_TIME,
          GRANTER,
          GRANT_NAME,
          ASSIGNEE,
          ASSIGN_NAME,
          UPDATE_TIME,
          `STATUS`,
          COMMENT
        FROM
          ${tablePrefix}proxy_relation r
          LEFT JOIN ${tablePrefix}proxy_proc p
            ON r.ID = p.RELATION_ID
        <where>
            and r.STATUS = '0'
            <if test="granter != null">
                and r.GRANTER = #{granter, jdbcType=VARCHAR}
            </if>
            <if test="assignee != null">
                and r.ASSIGNEE = #{assignee, jdbcType=VARCHAR}
            </if>
            <choose>
                <when test="isValid == 'true'">
                    and r.`STATUS` = '0'
                </when>
                <when test="isValid == 'false'">
                    and r.`STATUS` = '1'
                </when>
            </choose>
            <if test="comment != null">
                and lower(r.COMMENT) like CONCAT('%', lower(#{comment, jdbcType=VARCHAR}), '%')
            </if>
        </where>
    </sql>

    <sql id="instanceJoinProcess">
        SELECT j.*, b.PROC_DEF_NAME FROM ${tablePrefix}instance j
        LEFT JOIN ${tablePrefix}process b
        ON j.PROC_DEF_KEY = b.PROC_DEF_KEY
    </sql>

    <sql id="condId">
        <if test="id != null">
            AND j.ID = #{id, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condId_">
        <if test="id != null">
            AND ID = #{id, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condProcessInstanceId">
        <if test="processInstanceId != null">
            AND j.PROC_INST_ID = #{processInstanceId, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condProcessInstanceId_">
        <if test="processInstanceId != null">
            AND PROC_INST_ID = #{processInstanceId, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condProcessDefinitionKey">
        <if test="processDefinitionKey != null">
            AND j.PROC_DEF_KEY = #{processDefinitionKey, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condActId_">
        <if test="actId != null">
            AND ACT_ID = #{actId, jdbcType=VARCHAR}
        </if>
    </sql>

    <resultMap type="com.github.ibpm.common.result.core.instance.Instance" id="instanceResultMap">
        <result property="processInstanceId" column="PROC_INST_ID" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result property="rootProcessInstanceId" column="ROOT_PROC_INST_ID" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result property="superProcessInstanceId" column="SUPER_PROC_INST_ID" javaType="java.lang.String" jdbcType="VARCHAR" />
        <!--<result property="taskId" column="TASK_ID" javaType="java.lang.String" jdbcType="VARCHAR" />-->
        <result property="processDefinitionKey" column="PROC_DEF_KEY" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result property="processDefinitionName" column="PROC_DEF_NAME" javaType="java.lang.String" jdbcType="VARCHAR" />
        <!--<result property="status" column="STATUS" javaType="java.lang.Integer" jdbcType="INTEGER" />
        <result property="duration" column="DURATION" javaType="java.lang.Long" jdbcType="INTEGER" />-->
    </resultMap>

    <resultMap type="com.github.ibpm.common.result.core.instance.InstanceWithChildren" id="instanceWithChildrenResultMap" extends="instanceResultMap">

    </resultMap>

</mapper>