<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.ibpm.core.dao.instance.InstanceMapper">

    <select id="getById" parameterType="java.lang.String"
            resultType="com.github.ibpm.common.result.core.instance.Instance">
        <include refid="instanceJoinJob" />
        WHERE j.ID = #{1, jdbcType=VARCHAR}
    </select>

    <select id="getByInstId" parameterType="java.lang.String"
            resultType="com.github.ibpm.common.result.core.instance.Instance">
        <include refid="instanceJoinJob" />
        WHERE j.PROC_INST_ID = #{1, jdbcType=VARCHAR}
    </select>

    <select id="getByIds" parameterType="list"
            resultType="com.github.ibpm.common.result.core.instance.Instance">
        SELECT * FROM ${tablePrefix}instance
        <where>
            AND ID in
            <foreach item="id" collection="list" open="(" separator="," close=")">
                #{id, jdbcType=VARCHAR}
            </foreach>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM ${tablePrefix}execution j
        <where>
            <include refid="condJobName"/>
            <if test="status != null &amp;&amp;status.size() &gt; 0">
                AND STATUS IN
                <foreach item="item" collection="status" open="(" separator="," close=")">
                    #{item, jdbcType=INTEGER}
                </foreach>
            </if>
        </where>
    </select>

    <select id="countInstance" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(*)  FROM ${tablePrefix}instance j
        <where>
            <include refid="condJobName" />
            <if test="lowerStartTime != null">
                AND start_time &gt;= #{lowerStartTime, jdbcType=INTEGER}
            </if>
            <if test="upperStartTime != null">
                AND start_time &lt;= #{upperStartTime, jdbcType=INTEGER}
            </if>
            <if test="status != null &amp;&amp;status.size() &gt; 0">
                AND STATUS in
                <foreach item="item" collection="status" open="(" separator="," close=")">
                    #{item, jdbcType=INTEGER}
                </foreach>
            </if>
        </where>
    </select>

    <select id="countProcessChildren" parameterType="string" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM ${tablePrefix}instance WHERE super_proc_inst_id = #{1, jdbcType=VARCHAR}
    </select>

    <select id="listProcessChildren" parameterType="string"
            resultType="com.github.ibpm.common.result.core.instance.InstanceWithChildren">
        SELECT * FROM ${tablePrefix}instance WHERE super_proc_inst_id = #{1, jdbcType=VARCHAR} ORDER BY id
    </select>

    <select id="countRetriedChildren" parameterType="string" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM ${tablePrefix}instance WHERE parent_id = #{1, jdbcType=VARCHAR} AND id != parent_id
    </select>

    <select id="listRetriedChildren" parameterType="string"
            resultType="com.github.ibpm.common.result.core.instance.InstanceWithChildren">
        <include refid="instanceJoinJob" />
        WHERE j.parent_id = #{1, jdbcType=VARCHAR} AND j.id != j.parent_id ORDER BY j.id DESC
    </select>

    <insert id="addExecution" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        INSERT INTO ${tablePrefix}execution
        <include refid="insertSql"/>
    </insert>

    <insert id="addInstance" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        INSERT INTO ${tablePrefix}instance
        <include refid="insertSql"/>
    </insert>

    <sql id="insertSql">
        (
            ID,
            PROC_INST_ID,
            ROOT_PROC_INST_ID,
            SUPER_PROC_INST_ID,
            JOB_NAME,
            TRIGGER_NAME,
            PROC_DEF_ID,
            START_TIME,
            END_TIME,
            DURATION,
            STATUS,
            CODE,
            MSG,
            PARENT_ID,
            SCHEDULER_URI,
            EXECUTOR_URI
        )
        VALUES
        (
            #{id, jdbcType=VARCHAR},
            #{procInstId, jdbcType=VARCHAR},
            #{rootProcInstId, jdbcType=VARCHAR},
            #{superProcInstId, jdbcType=VARCHAR},
            #{jobName, jdbcType=VARCHAR},
            #{triggerName, jdbcType=VARCHAR},
            #{procDefId, jdbcType=VARCHAR},
            #{startTime, jdbcType=INTEGER},
            #{endTime, jdbcType=INTEGER},
            #{duration, jdbcType=INTEGER},
            #{status, jdbcType=INTEGER},
            #{code, jdbcType=INTEGER},
            #{msg, jdbcType=VARCHAR},
            #{parentId, jdbcType=VARCHAR},
            #{schedulerUri, jdbcType=VARCHAR},
            #{executorUri, jdbcType=VARCHAR}
        )
    </sql>

    <update id="updateExecution" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        UPDATE ${tablePrefix}execution
        <include refid="updateSql"/>
    </update>

    <update id="updateInstance" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        UPDATE ${tablePrefix}instance
        <include refid="updateSql"/>
    </update>

    <update id="updateDone" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        UPDATE ${tablePrefix}instance
        <set>
            <if test="endTime != null">
                END_TIME = #{endTime, jdbcType=INTEGER},
            </if>
            <if test="duration != null">
                DURATION = #{duration, jdbcType=INTEGER},
            </if>
            <if test="status != null">
                STATUS = #{status, jdbcType=INTEGER},
            </if>
            CODE = #{code, jdbcType=INTEGER},
            MSG = #{msg, jdbcType=VARCHAR},
            <if test="parentId != null">
                PARENT_ID = #{parentId, jdbcType=VARCHAR},
            </if>
        </set>
        <where>
            <include refid="condId_"/>
        </where>
    </update>

    <delete id="deleteExecution" parameterType="com.github.ibpm.common.result.core.instance.Instance">
        DELETE FROM ${tablePrefix}execution
        <where>
            <include refid="condProcInstId_"/>
        </where>
    </delete>

    <sql id="updateSql">
        <set>
            <if test="procInstId != null">
                PROC_INST_ID = #{procInstId, jdbcType=VARCHAR},
            </if>
            <if test="rootProcInstId != null">
                ROOT_PROC_INST_ID = #{rootProcInstId, jdbcType=VARCHAR},
            </if>
            <if test="superProcInstId != null">
                SUPER_PROC_INST_ID = #{superProcInstId, jdbcType=VARCHAR},
            </if>
            <if test="procDefId != null">
                PROC_DEF_ID = #{procDefId, jdbcType=VARCHAR},
            </if>
            <if test="startTime != null">
                START_TIME = #{startTime, jdbcType=INTEGER},
            </if>
            <if test="endTime != null">
                END_TIME = #{endTime, jdbcType=INTEGER},
            </if>
            <if test="duration != null">
                DURATION = #{duration, jdbcType=INTEGER},
            </if>
            <if test="status != null">
                STATUS = #{status, jdbcType=INTEGER},
            </if>
            <if test="code != null">
                CODE = #{code, jdbcType=INTEGER},
            </if>
            <if test="msg != null">
                MSG = #{msg, jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                PARENT_ID = #{parentId, jdbcType=VARCHAR},
            </if>
        </set>
        <where>
            <include refid="condId_"/>
        </where>
    </sql>

    <insert id="addAct" parameterType="com.github.ibpm.common.result.core.instance.InstanceAct">
        INSERT INTO ${tablePrefix}instance_act
        (
            ID,
            ACT_INST_ID,
            PARENT_ACT_INST_ID,
            PROC_INST_ID,
            ROOT_PROC_INST_ID,
            ACT_ID,
            ACT_NAME,
            ACT_TYPE,
            START_TIME,
            STATUS,
            LOG_TEXT
        )
        VALUES
        (
            #{id, jdbcType=VARCHAR},
            #{actInstId, jdbcType=VARCHAR},
            #{parentActInstId, jdbcType=VARCHAR},
            #{procInstId, jdbcType=VARCHAR},
            #{rootProcInstId, jdbcType=VARCHAR},
            #{actId, jdbcType=VARCHAR},
            #{actName, jdbcType=VARCHAR},
            #{actType, jdbcType=VARCHAR},
            #{startTime, jdbcType=INTEGER},
            #{status, jdbcType=INTEGER},
            #{logText, jdbcType=VARCHAR}
        )
    </insert>

    <update id="updateAct" parameterType="com.github.ibpm.common.result.core.instance.InstanceAct">
        UPDATE ${tablePrefix}instance_act
        <set>
            <if test="status != null">
                STATUS = #{status, jdbcType=INTEGER},
            </if>
            <if test="endTime != null">
                END_TIME = #{endTime, jdbcType=INTEGER},
            </if>
            <if test="duration != null">
                DURATION = #{duration, jdbcType=INTEGER},
            </if>
            <if test="bizUri != null">
                BIZ_URI = #{bizUri, jdbcType=VARCHAR},
            </if>
            <if test="logKey != null">
                LOG_KEY = #{logKey, jdbcType=VARCHAR},
            </if>
            <if test="logText != null">
                LOG_TEXT = CONCAT(LOG_TEXT, #{logText, jdbcType=VARCHAR}),
            </if>
        </set>
        <where>
            <include refid="condId_"/>
            <include refid="condProcInstId_"/>
            <include refid="condActId_"/>
        </where>
    </update>

    <select id="listInstance" parameterType="map"
            resultType="com.github.ibpm.common.result.core.instance.InstanceWithChildren">
        SELECT * FROM (<include refid="todoListWrapperSql" />)j
        <where>
            AND j.SUPER_PROC_INST_ID IS NULL
            <if test="jobName != null">
                AND LOWER(j.JOB_NAME) LIKE CONCAT(CONCAT('%', LOWER(#{jobName, jdbcType=VARCHAR})), '%')
            </if>
            <if test="displayName != null">
                AND LOWER(j.DISPLAY_NAME) LIKE CONCAT(CONCAT('%', LOWER(#{displayName, jdbcType=VARCHAR})), '%')
            </if>
            <if test="lowerStartTime != null">
                AND j.START_TIME &gt;= #{lowerStartTime, jdbcType=INTEGER}
            </if>
            <if test="upperStartTime != null">
                AND j.START_TIME &lt;= #{upperStartTime, jdbcType=INTEGER}
            </if>
            <if test="lowerEndTime != null">
                AND j.END_TIME &gt; #{lowerEndTime, jdbcType=INTEGER}
            </if>
            <if test="upperEndTime != null">
                AND j.END_TIME &lt;= #{upperEndTime, jdbcType=INTEGER}
            </if>
            <if test="lowerDuration != null">
                AND j.DURATION &gt;= #{lowerDuration, jdbcType=INTEGER}
            </if>
            <if test="upperDuration != null">
                AND j.DURATION &lt;= #{upperDuration, jdbcType=INTEGER}
            </if>
            <include refid="condProcInstId"/>
        </where>
        <choose>
            <when test="sort == null">
                order by PROC_INST_ID DESC
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="listAct" parameterType="map"
            resultType="com.github.ibpm.common.result.core.instance.InstanceAct">
        SELECT j.* FROM (
        SELECT jia.ID, jia.ACT_INST_ID, jia.PARENT_ACT_INST_ID, jia.PROC_INST_ID,jia.ROOT_PROC_INST_ID,
        jia.ACT_ID, jia.ACT_NAME, jia.ACT_TYPE, jia.STATUS, jia.LOG_KEY, jia.BIZ_URI,
        jia.START_TIME, jia.END_TIME, jia.DURATION, jia.LOG_TEXT, hi.INCIDENT_MSG_ AS INCIDENT_MSG
        FROM ${tablePrefix}instance_act jia
        LEFT JOIN act_hi_incident hi ON jia.PROC_INST_ID = hi.PROC_INST_ID_ AND jia.ACT_ID = hi.ACTIVITY_ID_) j
        <where>
            <include refid="condProcInstId" />
            <include refid="condActId_" />
        </where>
    </select>

    <select id="listRunningOfExecutor" parameterType="string"
            resultType="com.github.ibpm.common.result.core.instance.Instance">
        SELECT j.*, b.DISPLAY_NAME FROM ${tablePrefix}execution j
        LEFT JOIN ${tablePrefix}job b
        ON j.JOB_NAME = b.JOB_NAME
        <where>
            AND j.EXECUTOR_URI LIKE CONCAT(CONCAT('%', #{1, jdbcType=VARCHAR}), '%')
            AND j.STATUS = 0
        </where>
    </select>

    <sql id="todoListWrapperSql">
        SELECT
            ta.PROC_INST_ID,
            GROUP_CONCAT(DISTINCT ta.TASK_ID SEPARATOR ',') AS TASK_ID,
            ta.PROC_DEF_ID,
            ta.VERSION,
            ta.JOB_NAME,
            ta.DISPLAY_NAME,
            ta.STARTER,
            ta.DURATION,
            ta.ROOT_PROC_INST_ID,
            ta.SUPER_PROC_INST_ID,
            GROUP_CONCAT(DISTINCT ta.ASSIGNEE SEPARATOR ',') AS ASSIGNEE,
            GROUP_CONCAT(DISTINCT ta.ASSIGN_NAME SEPARATOR ',') AS ASSIGN_NAMES,
            GROUP_CONCAT(DISTINCT ta.GRANTER SEPARATOR ',') AS GRANTERS,
            GROUP_CONCAT(DISTINCT ta.GRANT_NAME SEPARATOR ',') AS GRANT_NAMES,
            ta.NODE_ID,
            ta.NODE_NAME,
            ta.START_TIME,
            ta.END_TIME,
            ta.ASSIGN_TIME
        FROM
          (<include refid="todoListSql" />) ta
        GROUP BY ta.PROC_INST_ID, ta.NODE_ID
    </sql>

    <sql id="todoListSql">
        SELECT
            task.PROC_INST_ID,
            task.TASK_ID,
            task.PROC_DEF_ID,
            task.VERSION,
            task.JOB_NAME,
            task.DISPLAY_NAME,
            task.STARTER,
            task.START_TIME,
            task.END_TIME,
            task.DURATION,
            task.ROOT_PROC_INST_ID,
            task.SUPER_PROC_INST_ID,
            task.NODE_ID,
            task.NODE_NAME,
            task.ASSIGNEE AS GRANTER,
            u.DISPLAY_NAME AS GRANT_NAME,
            IFNULL(o.ASSIGNEE, task.ASSIGNEE) AS ASSIGNEE,
            IFNULL(o.ASSIGN_NAME, u.DISPLAY_NAME) AS ASSIGN_NAME,
            task.ASSIGN_TIME
        FROM
            (SELECT
                t.PROC_INST_ID_ AS PROC_INST_ID,
                t.ID_ AS TASK_ID,
                t.PROC_DEF_ID_ AS PROC_DEF_ID,
                d.VERSION_ AS VERSION,
                d.KEY_ AS JOB_NAME,
                d.NAME_ AS DISPLAY_NAME,
                t.TASK_DEF_KEY_ AS NODE_ID,
                t.NAME_ AS NODE_NAME,
                IFNULL(t.ASSIGNEE_, l.USER_ID_) AS ASSIGNEE,
                t.CREATE_TIME_ AS ASSIGN_TIME,
                ins.START_USER_ID_ AS STARTER,
                ins.START_TIME_ AS START_TIME,
                ins.END_TIME_ AS END_TIME,
                ins.DURATION_ AS DURATION,
                ins.ROOT_PROC_INST_ID_ AS ROOT_PROC_INST_ID,
                ins.SUPER_PROCESS_INSTANCE_ID_ AS SUPER_PROC_INST_ID
            FROM act_ru_task t
            LEFT JOIN act_ru_identitylink l
              ON t.ID_ = l.TASK_ID_
                AND l.TYPE_ = 'candidate'
                AND l.USER_ID_ IS NOT NULL
                AND t.ASSIGNEE_ IS NULL
            JOIN act_hi_procinst ins
              ON t.proc_inst_id_ = ins.proc_inst_id_
            JOIN act_re_procdef d
              ON d.ID_ = ins.proc_def_id_) task
            LEFT JOIN (<include refid="proxySql"/>) o
              ON task.assignee = o.GRANTER
                AND (ISNULL(o.PROC_DEF_KEY) OR task.JOB_NAME = o.PROC_DEF_KEY)
            LEFT JOIN ibpm_user u
              ON task.assignee = u.USER_NAME
    </sql>

    <sql id="proxySql">
        SELECT
          r.ID,
          p.PROC_DEF_KEY,
          OPER_USER,
          OPER_NAME,
          CREATE_TIME,
          GRANTER,
          GRANT_NAME,
          ASSIGNEE,
          ASSIGN_NAME,
          UPDATE_TIME,
          `STATUS`,
          COMMENT
        FROM
          ${tablePrefix}proxy_relation r
          LEFT JOIN ${tablePrefix}proxy_proc p
            ON r.ID = p.RELATION_ID
        <where>
            and r.STATUS = '0'
            <if test="granter != null">
                and r.GRANTER = #{granter, jdbcType=VARCHAR}
            </if>
            <if test="assignee != null">
                and r.ASSIGNEE = #{assignee, jdbcType=VARCHAR}
            </if>
            <choose>
                <when test="isValid == 'true'">
                    and r.`STATUS` = '0'
                </when>
                <when test="isValid == 'false'">
                    and r.`STATUS` = '1'
                </when>
            </choose>
            <if test="comment != null">
                and lower(r.COMMENT) like CONCAT('%', lower(#{comment, jdbcType=VARCHAR}), '%')
            </if>
        </where>
    </sql>

    <sql id="instanceJoinJob">
        SELECT j.*, b.DISPLAY_NAME FROM ${tablePrefix}instance j
        LEFT JOIN ${tablePrefix}job b
        ON j.JOB_NAME = b.JOB_NAME
    </sql>

    <sql id="condId">
        <if test="id != null">
            AND j.ID = #{id, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condId_">
        <if test="id != null">
            AND ID = #{id, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condProcInstId">
        <if test="procInstId != null">
            AND j.PROC_INST_ID = #{procInstId, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condProcInstId_">
        <if test="procInstId != null">
            AND PROC_INST_ID = #{procInstId, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condJobName">
        <if test="jobName != null">
            AND j.JOB_NAME = #{jobName, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="condActId_">
        <if test="actId != null">
            AND ACT_ID = #{actId, jdbcType=VARCHAR}
        </if>
    </sql>
</mapper>