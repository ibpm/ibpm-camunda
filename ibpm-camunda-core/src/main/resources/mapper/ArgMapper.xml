<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.ibpm.core.dao.core.ArgMapper">
    <insert id="add" parameterType="com.github.ibpm.common.result.core.arg.Arg">
        INSERT INTO ${tablePrefix}arg (
            ARG_NAME,
            ARG_TYPE,
            ARG_VALUE,
            GENERIC_TYPE,
            ATTRIBUTE,
            REMARK
        )
        VALUES
        (
            #{argName, jdbcType=VARCHAR},
            #{argType, jdbcType=INTEGER},
            #{argValue, jdbcType=VARCHAR},
            #{genericType, jdbcType=INTEGER},
            #{attribute, jdbcType=VARCHAR},
            #{remark, jdbcType=VARCHAR}
        )
    </insert>

    <insert id="addBatch" parameterType="java.util.List">
        INSERT INTO ${tablePrefix}arg (
        ARG_NAME,
        ARG_TYPE,
        ARG_VALUE,
        GENERIC_TYPE,
        ATTRIBUTE,
        REMARK
        )
        VALUES
        <foreach item="item" collection="list" separator=",">
            (
            #{item.argName, jdbcType=VARCHAR},
            #{item.argType, jdbcType=INTEGER},
            #{item.argValue, jdbcType=VARCHAR},
            #{item.genericType, jdbcType=INTEGER},
            #{item.attribute, jdbcType=VARCHAR},
            #{item.remark, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <insert id="addBatch" databaseId="oracle" parameterType="java.util.List">
        INSERT INTO ${tablePrefix}condition (
        ARG_NAME,
        ARG_TYPE,
        ARG_VALUE,
        GENERIC_TYPE,
        ATTRIBUTE,
        REMARK
        )
        SELECT
        * FROM
        (
        <foreach item="item" collection="list" separator="union">
            SELECT
            #{item.argName, jdbcType=VARCHAR},
            #{item.argType, jdbcType=INTEGER},
            #{item.argValue, jdbcType=VARCHAR},
            #{item.genericType, jdbcType=INTEGER},
            #{item.attribute, jdbcType=VARCHAR},
            #{item.remark, jdbcType=VARCHAR}
            FROM dual
        </foreach>
        )
    </insert>

    <update id="update" parameterType="com.github.ibpm.common.result.core.arg.Arg">
        UPDATE
        ${tablePrefix}arg
        <set>
            ARG_TYPE = #{argType, jdbcType=INTEGER},
            GENERIC_TYPE = #{genericType, jdbcType=INTEGER},
            ARG_VALUE = #{argValue, jdbcType=VARCHAR},
            REMARK = #{remark, jdbcType=VARCHAR},
            ATTRIBUTE = #{attribute, jdbcType=VARCHAR},
        </set>
        <where>
            <include refid="condArgName_"/>
        </where>
    </update>

    <select id="get" parameterType="map" resultType="com.github.ibpm.common.result.core.arg.Arg">
        SELECT *
        FROM ${tablePrefix}arg
        <where>
            <include refid="condArgName_"/>
        </where>
    </select>

    <select id="list" parameterType="map" resultType="com.github.ibpm.common.result.core.arg.Arg">
        SELECT *
        FROM ${tablePrefix}arg
        <where>
            <if test="argName != null">
                AND LOWER(ARG_NAME) LIKE CONCAT(CONCAT('%', LOWER(#{argName, jdbcType=VARCHAR})), '%')
            </if>
            <if test="argType != null">
                AND ARG_TYPE = #{argType, jdbcType = INTEGER}
            </if>
            <if test="argValue != null">
                AND LOWER(ARG_VALUE) LIKE CONCAT(CONCAT('%', LOWER(#{argValue, jdbcType = VARCHAR})), '%')
            </if>
            <if test="remark != null">
                AND LOWER(REMARK) LIKE CONCAT(CONCAT('%', LOWER(#{remark, jdbcType = VARCHAR})), '%')
            </if>
        </where>
        <choose>
            <when test="sort == null">
                order by ARG_NAME
            </when>
            <otherwise>
                order by ${sort}
            </otherwise>
        </choose>
    </select>

    <select id="listStartsWith" parameterType="map" resultType="com.github.ibpm.common.result.core.arg.Arg">
        SELECT *
        FROM ${tablePrefix}arg
        <where>
            ARG_NAME LIKE CONCAT(#{argName, jdbcType=VARCHAR}, '%')
        </where>
    </select>

    <delete id="delete" parameterType="map">
        DELETE FROM ${tablePrefix}arg
        <where>
            ARG_NAME IN
            <foreach item="argName" collection="argNames" open="(" separator="," close=")">
                #{argName, jdbcType = VARCHAR}
            </foreach>
        </where>
    </delete>

    <sql id="condArgName_">
        <if test="argName != null">
            AND ARG_NAME = #{argName, jdbcType=VARCHAR}
        </if>
    </sql>

</mapper>